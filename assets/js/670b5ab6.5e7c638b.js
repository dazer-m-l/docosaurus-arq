"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4250],{3162:(e,a,i)=>{i.r(a),i.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>p,frontMatter:()=>o,metadata:()=>s,toc:()=>d});const s=JSON.parse('{"id":"Visitor/Visitor-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n Visitor","description":"El patr\xf3n Visitor se caracteriza por su capacidad de separar algoritmos y estructuras de datos, permitiendo un dise\xf1o modular, extensible y f\xe1cil de mantener. A continuaci\xf3n, se describen sus principales caracter\xedsticas:","source":"@site/docs/06-Visitor/02-Visitor-Caracteristicas.md","sourceDirName":"06-Visitor","slug":"/Visitor/Visitor-Caracteristicas","permalink":"/docosaurus-arq/docs/Visitor/Visitor-Caracteristicas","draft":false,"unlisted":false,"editUrl":"https://github.com/dazer-m-l/docosaurus-arq/tree/main/docs/docs/06-Visitor/02-Visitor-Caracteristicas.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n al Patr\xf3n Visitor","permalink":"/docosaurus-arq/docs/Visitor/Visitor-Intro"},"next":{"title":"Ventajas y Desventajas del Patr\xf3n Visitor","permalink":"/docosaurus-arq/docs/Visitor/Visitor-Ventaja-Desventaja"}}');var r=i(4848),n=i(8453);const o={sidebar_position:2},t="Caracter\xedsticas del Patr\xf3n Visitor",c={},d=[{value:"1. <strong>Separaci\xf3n de Algoritmos y Datos</strong>",id:"1-separaci\xf3n-de-algoritmos-y-datos",level:2},{value:"Ejemplo:",id:"ejemplo",level:3},{value:"2. Doble Despacho",id:"2-doble-despacho",level:2},{value:"3. Extensibilidad",id:"3-extensibilidad",level:2},{value:"4. Consistencia en la Estructura de Objetos",id:"4-consistencia-en-la-estructura-de-objetos",level:2},{value:"5. Flexibilidad",id:"5-flexibilidad",level:2},{value:"6. Reutilizaci\xf3n de C\xf3digo",id:"6-reutilizaci\xf3n-de-c\xf3digo",level:2},{value:"7. Soporte para Jerarqu\xedas de Clases",id:"7-soporte-para-jerarqu\xedas-de-clases",level:2},{value:"8. Simplicidad para Operaciones Frecuentes",id:"8-simplicidad-para-operaciones-frecuentes",level:2}];function l(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,n.R)(),...e.components};return(0,r.jsxs)(r.Fragment,{children:[(0,r.jsx)(a.header,{children:(0,r.jsx)(a.h1,{id:"caracter\xedsticas-del-patr\xf3n-visitor",children:"Caracter\xedsticas del Patr\xf3n Visitor"})}),"\n",(0,r.jsxs)(a.p,{children:["El patr\xf3n ",(0,r.jsx)(a.strong,{children:"Visitor"})," se caracteriza por su capacidad de separar algoritmos y estructuras de datos, permitiendo un dise\xf1o modular, extensible y f\xe1cil de mantener. A continuaci\xf3n, se describen sus principales caracter\xedsticas:"]}),"\n",(0,r.jsx)(a.hr,{}),"\n",(0,r.jsxs)(a.h2,{id:"1-separaci\xf3n-de-algoritmos-y-datos",children:["1. ",(0,r.jsx)(a.strong,{children:"Separaci\xf3n de Algoritmos y Datos"})]}),"\n",(0,r.jsxs)(a.p,{children:["El patr\xf3n ",(0,r.jsx)(a.strong,{children:"Visitor"})," desacopla las operaciones (algoritmos) de las estructuras de datos sobre las que act\xfaan. Esto significa que las clases que representan datos no necesitan incluir l\xf3gica para cada operaci\xf3n posible, manteni\xe9ndose m\xe1s enfocadas en sus responsabilidades."]}),"\n",(0,r.jsx)(a.h3,{id:"ejemplo",children:"Ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:"class PDFDocument {\r\n  accept(visitor) {\r\n    visitor.visitPDFDocument(this); // Delegar operaci\xf3n al visitante\r\n  }\r\n}\r\n\r\nclass WordDocument {\r\n  accept(visitor) {\r\n    visitor.visitWordDocument(this);\r\n  }\r\n}\n"})}),"\n",(0,r.jsx)(a.p,{children:"Aqu\xed, PDFDocument y WordDocument no implementan l\xf3gica espec\xedfica para sus operaciones; simplemente delegan el trabajo al visitante."}),"\n",(0,r.jsx)(a.h2,{id:"2-doble-despacho",children:"2. Doble Despacho"}),"\n",(0,r.jsx)(a.p,{children:"El patr\xf3n utiliza el concepto de doble despacho, donde tanto el tipo del objeto visitado como el tipo del visitante determinan la operaci\xf3n que se ejecutar\xe1. Esto permite realizar acciones espec\xedficas para cada combinaci\xf3n de visitante y objeto."}),"\n",(0,r.jsx)(a.p,{children:"Ejemplo:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:'Copiar c\xf3digo\r\nclass PrintVisitor {\r\n  visitPDFDocument(doc) {\r\n    console.log("Imprimiendo documento PDF.");\r\n  }\r\n\r\n  visitWordDocument(doc) {\r\n    console.log("Imprimiendo documento Word.");\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"El m\xe9todo accept(visitor) en cada clase asegura que se llame al m\xe9todo correcto del visitante seg\xfan el tipo del objeto."}),"\n",(0,r.jsx)(a.h2,{id:"3-extensibilidad",children:"3. Extensibilidad"}),"\n",(0,r.jsx)(a.p,{children:"El patr\xf3n facilita la adici\xf3n de nuevos algoritmos sin modificar la estructura de datos existente. Para agregar una nueva funcionalidad, solo se necesita implementar una nueva clase visitante que implemente los m\xe9todos adecuados para cada tipo de objeto."}),"\n",(0,r.jsx)(a.p,{children:"Ejemplo:\r\nAgregar un nuevo visitante para exportar documentos:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:'Copiar c\xf3digo\r\nclass ExportVisitor {\r\n  visitPDFDocument(doc) {\r\n    console.log("Exportando documento PDF a formato PNG.");\r\n  }\r\n\r\n  visitWordDocument(doc) {\r\n    console.log("Exportando documento Word a formato TXT.");\r\n  }\r\n}\n'})}),"\n",(0,r.jsx)(a.p,{children:"No es necesario cambiar PDFDocument ni WordDocument, ya que ambas clases aceptar\xe1n el nuevo visitante."}),"\n",(0,r.jsx)(a.h2,{id:"4-consistencia-en-la-estructura-de-objetos",children:"4. Consistencia en la Estructura de Objetos"}),"\n",(0,r.jsx)(a.p,{children:"Las clases que forman la estructura de objetos no necesitan modificarse cuando se a\xf1aden nuevas operaciones. Esto asegura que el dise\xf1o siga el principio Open/Closed (abierto para extensi\xf3n, cerrado para modificaci\xf3n)."}),"\n",(0,r.jsx)(a.p,{children:"Ejemplo:\r\nLa estructura de documentos puede ser representada por:"}),"\n",(0,r.jsx)(a.pre,{children:(0,r.jsx)(a.code,{className:"language-javascript",children:"Copiar c\xf3digo\r\nclass PDFDocument { /* Datos espec\xedficos del PDF */ }\r\nclass WordDocument { /* Datos espec\xedficos del Word */ }\n"})}),"\n",(0,r.jsx)(a.p,{children:"Estas clases permanecen inalteradas al introducir visitantes como PrintVisitor o ExportVisitor."}),"\n",(0,r.jsx)(a.h2,{id:"5-flexibilidad",children:"5. Flexibilidad"}),"\n",(0,r.jsx)(a.p,{children:"El patr\xf3n Visitor permite implementar operaciones complejas que requieren informaci\xf3n sobre m\xfaltiples objetos en la estructura. Tambi\xe9n es \xfatil para realizar validaciones o transformaciones que afectan diferentes partes del sistema."}),"\n",(0,r.jsx)(a.h2,{id:"6-reutilizaci\xf3n-de-c\xf3digo",children:"6. Reutilizaci\xf3n de C\xf3digo"}),"\n",(0,r.jsx)(a.p,{children:"Los visitantes pueden ser reutilizados con diferentes estructuras de objetos que compartan una interfaz com\xfan. Esto promueve la consistencia y evita duplicar l\xf3gica."}),"\n",(0,r.jsx)(a.h2,{id:"7-soporte-para-jerarqu\xedas-de-clases",children:"7. Soporte para Jerarqu\xedas de Clases"}),"\n",(0,r.jsx)(a.p,{children:"El patr\xf3n funciona bien con jerarqu\xedas de clases complejas, donde diferentes subtipos requieren tratamientos espec\xedficos. El visitante maneja esta complejidad con m\xe9todos especializados para cada tipo."}),"\n",(0,r.jsx)(a.h2,{id:"8-simplicidad-para-operaciones-frecuentes",children:"8. Simplicidad para Operaciones Frecuentes"}),"\n",(0,r.jsx)(a.p,{children:"Para operaciones comunes, como impresi\xf3n, exportaci\xf3n o generaci\xf3n de reportes, el patr\xf3n simplifica la implementaci\xf3n al centralizar la l\xf3gica en un \xfanico visitante."})]})}function p(e={}){const{wrapper:a}={...(0,n.R)(),...e.components};return a?(0,r.jsx)(a,{...e,children:(0,r.jsx)(l,{...e})}):l(e)}},8453:(e,a,i)=>{i.d(a,{R:()=>o,x:()=>t});var s=i(6540);const r={},n=s.createContext(r);function o(e){const a=s.useContext(n);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(r):e.components||r:o(e.components),s.createElement(n.Provider,{value:a},e.children)}}}]);
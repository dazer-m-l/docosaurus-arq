"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9825],{262:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>r,contentTitle:()=>o,default:()=>m,frontMatter:()=>d,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"State/State-Ventaja-Desventaja","title":"Ventajas y Desventajas del Patr\xf3n State","description":"El patr\xf3n State ofrece una soluci\xf3n flexible y modular para manejar el comportamiento de un objeto que cambia seg\xfan su estado. Sin embargo, tambi\xe9n tiene limitaciones. A continuaci\xf3n, se enumeran las principales ventajas y desventajas:","source":"@site/docs/04-State/03-State-Ventaja-Desventaja.md","sourceDirName":"04-State","slug":"/State/State-Ventaja-Desventaja","permalink":"/docosaurus-arq/docs/State/State-Ventaja-Desventaja","draft":false,"unlisted":false,"editUrl":"https://github.com/dazer-m-l/docosaurus-arq/tree/main/docs/docs/04-State/03-State-Ventaja-Desventaja.md","tags":[],"version":"current","sidebarPosition":3,"frontMatter":{"sidebar_position":3},"sidebar":"tutorialSidebar","previous":{"title":"Caracter\xedsticas del Patr\xf3n State","permalink":"/docosaurus-arq/docs/State/State-Caracteristicas"},"next":{"title":"Ejemplo del Patr\xf3n State","permalink":"/docosaurus-arq/docs/State/State-Ejemplo"}}');var i=n(4848),t=n(8453);const d={sidebar_position:3},o="Ventajas y Desventajas del Patr\xf3n State",r={},l=[{value:"Ventajas",id:"ventajas",level:2},{value:"1. <strong>Organizaci\xf3n del C\xf3digo</strong>",id:"1-organizaci\xf3n-del-c\xf3digo",level:3},{value:"Ejemplo:",id:"ejemplo",level:4},{value:"2. <strong>Extensibilidad</strong>",id:"2-extensibilidad",level:3},{value:"Ejemplo:",id:"ejemplo-1",level:4},{value:"3. <strong>Eliminaci\xf3n de Condicionales</strong>",id:"3-eliminaci\xf3n-de-condicionales",level:3},{value:"Ejemplo Antes:",id:"ejemplo-antes",level:4},{value:"Ejemplo Despu\xe9s:",id:"ejemplo-despu\xe9s",level:4},{value:"4. <strong>Mantenibilidad</strong>",id:"4-mantenibilidad",level:3},{value:"5. <strong>Reutilizaci\xf3n de C\xf3digo</strong>",id:"5-reutilizaci\xf3n-de-c\xf3digo",level:3},{value:"Desventajas",id:"desventajas",level:2},{value:"1. <strong>Aumento en la Complejidad del Sistema</strong>",id:"1-aumento-en-la-complejidad-del-sistema",level:3},{value:"2. <strong>Sobrecarga de Clases</strong>",id:"2-sobrecarga-de-clases",level:3},{value:"3. <strong>Cambio de Estados Din\xe1mico</strong>",id:"3-cambio-de-estados-din\xe1mico",level:3},{value:"Ejemplo de Cambio Frecuente:",id:"ejemplo-de-cambio-frecuente",level:4},{value:"4. <strong>Mayor Consumo de Memoria</strong>",id:"4-mayor-consumo-de-memoria",level:3}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h3:"h3",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,t.R)(),...e.components};return(0,i.jsxs)(i.Fragment,{children:[(0,i.jsx)(a.header,{children:(0,i.jsx)(a.h1,{id:"ventajas-y-desventajas-del-patr\xf3n-state",children:"Ventajas y Desventajas del Patr\xf3n State"})}),"\n",(0,i.jsxs)(a.p,{children:["El patr\xf3n ",(0,i.jsx)(a.strong,{children:"State"})," ofrece una soluci\xf3n flexible y modular para manejar el comportamiento de un objeto que cambia seg\xfan su estado. Sin embargo, tambi\xe9n tiene limitaciones. A continuaci\xf3n, se enumeran las principales ventajas y desventajas:"]}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"ventajas",children:"Ventajas"}),"\n",(0,i.jsxs)(a.h3,{id:"1-organizaci\xf3n-del-c\xf3digo",children:["1. ",(0,i.jsx)(a.strong,{children:"Organizaci\xf3n del C\xf3digo"})]}),"\n",(0,i.jsx)(a.p,{children:"Cada estado se encapsula en una clase separada, lo que mejora la organizaci\xf3n del c\xf3digo y facilita su comprensi\xf3n."}),"\n",(0,i.jsx)(a.h4,{id:"ejemplo",children:"Ejemplo:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'class PendingState {\r\n  handleRequest() {\r\n    console.log("La orden est\xe1 pendiente.");\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(a.h3,{id:"2-extensibilidad",children:["2. ",(0,i.jsx)(a.strong,{children:"Extensibilidad"})]}),"\n",(0,i.jsx)(a.p,{children:"El patr\xf3n permite agregar nuevos estados sin modificar el c\xf3digo existente, siguiendo el principio de abierto/cerrado (OCP)."}),"\n",(0,i.jsx)(a.h4,{id:"ejemplo-1",children:"Ejemplo:"}),"\n",(0,i.jsx)(a.p,{children:"Si se necesita un nuevo estado:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'class CanceledState {\r\n  handleRequest() {\r\n    console.log("La orden ha sido cancelada.");\r\n  }\r\n}\n'})}),"\n",(0,i.jsxs)(a.h3,{id:"3-eliminaci\xf3n-de-condicionales",children:["3. ",(0,i.jsx)(a.strong,{children:"Eliminaci\xf3n de Condicionales"})]}),"\n",(0,i.jsxs)(a.p,{children:["Reduce la necesidad de usar estructuras ",(0,i.jsx)(a.code,{children:"if-else"})," o ",(0,i.jsx)(a.code,{children:"switch"}),", mejorando la claridad del c\xf3digo."]}),"\n",(0,i.jsx)(a.h4,{id:"ejemplo-antes",children:"Ejemplo Antes:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:'if (estado === "pending") {\r\n  console.log("La orden est\xe1 pendiente.");\r\n}\n'})}),"\n",(0,i.jsx)(a.h4,{id:"ejemplo-despu\xe9s",children:"Ejemplo Despu\xe9s:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:"this.state.handleRequest();\n"})}),"\n",(0,i.jsxs)(a.h3,{id:"4-mantenibilidad",children:["4. ",(0,i.jsx)(a.strong,{children:"Mantenibilidad"})]}),"\n",(0,i.jsx)(a.p,{children:"Al separar los estados, es m\xe1s f\xe1cil identificar y resolver problemas relacionados con el comportamiento de un objeto."}),"\n",(0,i.jsxs)(a.h3,{id:"5-reutilizaci\xf3n-de-c\xf3digo",children:["5. ",(0,i.jsx)(a.strong,{children:"Reutilizaci\xf3n de C\xf3digo"})]}),"\n",(0,i.jsx)(a.p,{children:"Cada clase de estado puede reutilizarse en otros contextos, reduciendo la duplicaci\xf3n."}),"\n",(0,i.jsx)(a.hr,{}),"\n",(0,i.jsx)(a.h2,{id:"desventajas",children:"Desventajas"}),"\n",(0,i.jsxs)(a.h3,{id:"1-aumento-en-la-complejidad-del-sistema",children:["1. ",(0,i.jsx)(a.strong,{children:"Aumento en la Complejidad del Sistema"})]}),"\n",(0,i.jsx)(a.p,{children:"El patr\xf3n puede agregar complejidad, especialmente en sistemas con muchos estados, ya que requiere la creaci\xf3n de varias clases."}),"\n",(0,i.jsxs)(a.h3,{id:"2-sobrecarga-de-clases",children:["2. ",(0,i.jsx)(a.strong,{children:"Sobrecarga de Clases"})]}),"\n",(0,i.jsx)(a.p,{children:"Con muchos estados, el n\xfamero de clases puede crecer r\xe1pidamente, lo que puede dificultar la gesti\xf3n del proyecto."}),"\n",(0,i.jsxs)(a.h3,{id:"3-cambio-de-estados-din\xe1mico",children:["3. ",(0,i.jsx)(a.strong,{children:"Cambio de Estados Din\xe1mico"})]}),"\n",(0,i.jsx)(a.p,{children:"Si los estados se cambian frecuentemente, puede ser complicado rastrear el flujo del sistema."}),"\n",(0,i.jsx)(a.h4,{id:"ejemplo-de-cambio-frecuente",children:"Ejemplo de Cambio Frecuente:"}),"\n",(0,i.jsx)(a.pre,{children:(0,i.jsx)(a.code,{className:"language-javascript",children:"order.setState(new ShippedState());\r\norder.setState(new DeliveredState());\n"})}),"\n",(0,i.jsxs)(a.h3,{id:"4-mayor-consumo-de-memoria",children:["4. ",(0,i.jsx)(a.strong,{children:"Mayor Consumo de Memoria"})]}),"\n",(0,i.jsx)(a.p,{children:"El uso de m\xfaltiples objetos para representar estados puede consumir m\xe1s memoria que un enfoque basado en condicionales."}),"\n",(0,i.jsx)(a.hr,{})]})}function m(e={}){const{wrapper:a}={...(0,t.R)(),...e.components};return a?(0,i.jsx)(a,{...e,children:(0,i.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>d,x:()=>o});var s=n(6540);const i={},t=s.createContext(i);function d(e){const a=s.useContext(t);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function o(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(i):e.components||i:d(e.components),s.createElement(t.Provider,{value:a},e.children)}}}]);
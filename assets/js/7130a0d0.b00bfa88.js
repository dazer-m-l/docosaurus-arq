"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[601],{3261:(e,a,n)=>{n.r(a),n.d(a,{assets:()=>o,contentTitle:()=>d,default:()=>p,frontMatter:()=>r,metadata:()=>s,toc:()=>l});const s=JSON.parse('{"id":"State/State-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n State","description":"El patr\xf3n State es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto cambiar su comportamiento cuando su estado interno cambia. Las principales caracter\xedsticas del patr\xf3n State se centran en la flexibilidad, la modularidad y la capacidad de extender el comportamiento de un objeto sin modificar su c\xf3digo base. A continuaci\xf3n, se detallan sus caracter\xedsticas m\xe1s importantes:","source":"@site/docs/04-State/02-State-Caracteristicas.md","sourceDirName":"04-State","slug":"/State/State-Caracteristicas","permalink":"/docosaurus-arq/docs/State/State-Caracteristicas","draft":false,"unlisted":false,"editUrl":"https://github.com/dazer-m-l/docosaurus-arq/tree/main/docs/docs/04-State/02-State-Caracteristicas.md","tags":[],"version":"current","sidebarPosition":2,"frontMatter":{"sidebar_position":2},"sidebar":"tutorialSidebar","previous":{"title":"Introducci\xf3n al Patr\xf3n State","permalink":"/docosaurus-arq/docs/State/State-Intro"},"next":{"title":"Ventajas y Desventajas del Patr\xf3n State","permalink":"/docosaurus-arq/docs/State/State-Ventaja-Desventaja"}}');var t=n(4848),i=n(8453);const r={sidebar_position:2},d="Caracter\xedsticas del Patr\xf3n State",o={},l=[{value:"1. <strong>Encapsulaci\xf3n de Estados</strong>",id:"1-encapsulaci\xf3n-de-estados",level:2},{value:"Ejemplo:",id:"ejemplo",level:4},{value:"2. Delegaci\xf3n de Responsabilidades",id:"2-delegaci\xf3n-de-responsabilidades",level:2},{value:"Ejemplo:",id:"ejemplo-1",level:4},{value:"3. Extensibilidad",id:"3-extensibilidad",level:2},{value:"Ejemplo:",id:"ejemplo-2",level:4},{value:"4. Reducci\xf3n de Condicionales",id:"4-reducci\xf3n-de-condicionales",level:2},{value:"Ejemplo:",id:"ejemplo-3",level:4},{value:"5. Responsabilidad \xdanica",id:"5-responsabilidad-\xfanica",level:2},{value:"Ejemplo:",id:"ejemplo-4",level:4}];function c(e){const a={code:"code",h1:"h1",h2:"h2",h4:"h4",header:"header",hr:"hr",p:"p",pre:"pre",strong:"strong",...(0,i.R)(),...e.components};return(0,t.jsxs)(t.Fragment,{children:[(0,t.jsx)(a.header,{children:(0,t.jsx)(a.h1,{id:"caracter\xedsticas-del-patr\xf3n-state",children:"Caracter\xedsticas del Patr\xf3n State"})}),"\n",(0,t.jsxs)(a.p,{children:["El patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"})," es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto cambiar su comportamiento cuando su estado interno cambia. Las principales caracter\xedsticas del patr\xf3n State se centran en la flexibilidad, la modularidad y la capacidad de extender el comportamiento de un objeto sin modificar su c\xf3digo base. A continuaci\xf3n, se detallan sus caracter\xedsticas m\xe1s importantes:"]}),"\n",(0,t.jsx)(a.hr,{}),"\n",(0,t.jsxs)(a.h2,{id:"1-encapsulaci\xf3n-de-estados",children:["1. ",(0,t.jsx)(a.strong,{children:"Encapsulaci\xf3n de Estados"})]}),"\n",(0,t.jsxs)(a.p,{children:["El patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"})," encapsula cada estado en su propia clase. Esto significa que cada estado tiene su propia implementaci\xf3n de comportamiento, lo que facilita la gesti\xf3n y expansi\xf3n del sistema sin alterar el c\xf3digo central."]}),"\n",(0,t.jsx)(a.h4,{id:"ejemplo",children:"Ejemplo:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:'class PendingState {\r\n  handleRequest() {\r\n    console.log("La orden est\xe1 pendiente.");\r\n  }\r\n}\r\n\r\nclass ShippedState {\r\n  handleRequest() {\r\n    console.log("La orden ha sido enviada.");\r\n  }\r\n}\r\n\r\nclass DeliveredState {\r\n  handleRequest() {\r\n    console.log("La orden ha sido entregada.");\r\n  }\r\n}\n'})}),"\n",(0,t.jsx)(a.h2,{id:"2-delegaci\xf3n-de-responsabilidades",children:"2. Delegaci\xf3n de Responsabilidades"}),"\n",(0,t.jsxs)(a.p,{children:["En lugar de tener l\xf3gica compleja en la clase principal, el patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"})," delega la responsabilidad del comportamiento a las clases de los estados espec\xedficos. Esto hace que la clase principal sea m\xe1s sencilla y su l\xf3gica m\xe1s clara."]}),"\n",(0,t.jsx)(a.h4,{id:"ejemplo-1",children:"Ejemplo:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:"class Order {\r\n  constructor() {\r\n    this.state = new PendingState(); // Estado inicial\r\n  }\r\n\r\n  setState(state) {\r\n    this.state = state; // Cambiar el estado\r\n  }\r\n\r\n  processOrder() {\r\n    this.state.handleRequest(); // Delegar al estado actual\r\n  }\r\n}\n"})}),"\n",(0,t.jsxs)(a.p,{children:["Aqu\xed, la clase ",(0,t.jsx)(a.code,{children:"Order"})," no se preocupa por c\xf3mo manejar los diferentes estados. Simplemente delega la responsabilidad a los objetos de estado."]}),"\n",(0,t.jsx)(a.h2,{id:"3-extensibilidad",children:"3. Extensibilidad"}),"\n",(0,t.jsxs)(a.p,{children:["El patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"})," permite agregar nuevos estados sin necesidad de modificar el c\xf3digo existente. Si se desea agregar un nuevo estado, simplemente se crea una nueva clase que implemente los comportamientos correspondientes para ese estado. Esto proporciona una excelente extensi\xf3n para el sistema sin afectar el dise\xf1o ya existente."]}),"\n",(0,t.jsx)(a.h4,{id:"ejemplo-2",children:"Ejemplo:"}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:'class CanceledState {\r\n  handleRequest() {\r\n    console.log("La orden ha sido cancelada.");\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(a.p,{children:['Si en el futuro se requiere agregar un estado "Cancelado", se puede hacer sin modificar el c\xf3digo existente, simplemente a\xf1adiendo una nueva clase ',(0,t.jsx)(a.code,{children:"CanceledState"}),"."]}),"\n",(0,t.jsx)(a.h2,{id:"4-reducci\xf3n-de-condicionales",children:"4. Reducci\xf3n de Condicionales"}),"\n",(0,t.jsxs)(a.p,{children:["El patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"})," ayuda a eliminar la necesidad de estructuras condicionales como ",(0,t.jsx)(a.code,{children:"if-else"})," o ",(0,t.jsx)(a.code,{children:"switch"})," para manejar los diferentes comportamientos de un objeto. El comportamiento se decide mediante la delegaci\xf3n a las clases de estado, lo que reduce significativamente el c\xf3digo condicional y mejora la legibilidad."]}),"\n",(0,t.jsx)(a.h4,{id:"ejemplo-3",children:"Ejemplo:"}),"\n",(0,t.jsxs)(a.p,{children:["Antes de usar el patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"}),":"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:'class Order {\r\n  constructor() {\r\n    this.state = "pending";\r\n  }\r\n\r\n  processOrder() {\r\n    if (this.state === "pending") {\r\n      console.log("La orden est\xe1 pendiente.");\r\n    } else if (this.state === "shipped") {\r\n      console.log("La orden ha sido enviada.");\r\n    } else if (this.state === "delivered") {\r\n      console.log("La orden ha sido entregada.");\r\n    }\r\n  }\r\n}\n'})}),"\n",(0,t.jsxs)(a.p,{children:["Con el patr\xf3n ",(0,t.jsx)(a.strong,{children:"State"}),":"]}),"\n",(0,t.jsx)(a.pre,{children:(0,t.jsx)(a.code,{className:"language-javascript",children:"class Order {\r\n  constructor() {\r\n    this.state = new PendingState(); // Estado inicial\r\n  }\r\n\r\n  setState(state) {\r\n    this.state = state; // Cambiar el estado\r\n  }\r\n\r\n  processOrder() {\r\n    this.state.handleRequest(); // Delegar al estado actual\r\n  }\r\n}\n"})}),"\n",(0,t.jsx)(a.p,{children:"Este enfoque reduce la necesidad de condicionales, haciendo que el c\xf3digo sea m\xe1s f\xe1cil de entender y mantener."}),"\n",(0,t.jsx)(a.h2,{id:"5-responsabilidad-\xfanica",children:"5. Responsabilidad \xdanica"}),"\n",(0,t.jsxs)(a.p,{children:["Cada clase de estado tiene la responsabilidad \xfanica de manejar un comportamiento espec\xedfico asociado con su estado. Esto sigue el principio de ",(0,t.jsx)(a.strong,{children:"Responsabilidad \xdanica"})," (SRP), que es uno de los principios SOLID. Al delegar las responsabilidades a las clases de estado, el c\xf3digo es m\xe1s limpio y modular."]}),"\n",(0,t.jsx)(a.h4,{id:"ejemplo-4",children:"Ejemplo:"}),"\n",(0,t.jsx)(a.p,{children:"Cada clase de estado maneja \xfanicamente su propio comportamiento. Esto asegura que cada parte del c\xf3digo est\xe9 organizada y f\xe1cil de gestionar."}),"\n",(0,t.jsx)(a.hr,{})]})}function p(e={}){const{wrapper:a}={...(0,i.R)(),...e.components};return a?(0,t.jsx)(a,{...e,children:(0,t.jsx)(c,{...e})}):c(e)}},8453:(e,a,n)=>{n.d(a,{R:()=>r,x:()=>d});var s=n(6540);const t={},i=s.createContext(t);function r(e){const a=s.useContext(i);return s.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function d(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(t):e.components||t:r(e.components),s.createElement(i.Provider,{value:a},e.children)}}}]);
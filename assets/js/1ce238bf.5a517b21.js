"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[9619],{7959:(e,n,o)=>{o.r(n),o.d(n,{assets:()=>i,contentTitle:()=>d,default:()=>c,frontMatter:()=>a,metadata:()=>r,toc:()=>m});const r=JSON.parse('{"id":"Command/Command-ejemplo","title":"Ejemplo del Patr\xf3n Command","description":"Un sistema de control remoto para dispositivos electr\xf3nicos. Este control remoto puede ejecutar varias acciones como encender o apagar dispositivos y ajustar el volumen. Cada acci\xf3n se encapsula como un comando.","source":"@site/docs/03-Command/04-Command-ejemplo.md","sourceDirName":"03-Command","slug":"/Command/Command-ejemplo","permalink":"/docosaurus-arq/docs/Command/Command-ejemplo","draft":false,"unlisted":false,"editUrl":"https://github.com/dazer-m-l/docosaurus-arq/tree/main/docs/docs/03-Command/04-Command-ejemplo.md","tags":[],"version":"current","sidebarPosition":4,"frontMatter":{},"sidebar":"tutorialSidebar","previous":{"title":"Ventajas y Desventajas del Patr\xf3n de Dise\xf1o Command","permalink":"/docosaurus-arq/docs/Command/Command-ventaja-desventaja"},"next":{"title":"Patron State","permalink":"/docosaurus-arq/docs/category/patron-state"}}');var s=o(4848),t=o(8453);const a={},d="Ejemplo del Patr\xf3n Command",i={},m=[];function l(e){const n={code:"code",h1:"h1",header:"header",p:"p",pre:"pre",...(0,t.R)(),...e.components};return(0,s.jsxs)(s.Fragment,{children:[(0,s.jsx)(n.header,{children:(0,s.jsx)(n.h1,{id:"ejemplo-del-patr\xf3n-command",children:"Ejemplo del Patr\xf3n Command"})}),"\n",(0,s.jsx)(n.p,{children:"Un sistema de control remoto para dispositivos electr\xf3nicos. Este control remoto puede ejecutar varias acciones como encender o apagar dispositivos y ajustar el volumen. Cada acci\xf3n se encapsula como un comando."}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{className:"language-python",children:'from abc import ABC, abstractmethod\r\n\r\n# Interfaz del Comando\r\nclass Command(ABC):\r\n    @abstractmethod\r\n    def execute(self):\r\n        pass\r\n\r\n    @abstractmethod\r\n    def undo(self):\r\n        pass\r\n\r\n# Receptor\r\nclass Television:\r\n    def turn_on(self):\r\n        print("Televisi\xf3n encendida.")\r\n\r\n    def turn_off(self):\r\n        print("Televisi\xf3n apagada.")\r\n\r\n    def volume_up(self):\r\n        print("Volumen aumentado.")\r\n\r\n    def volume_down(self):\r\n        print("Volumen disminuido.")\r\n\r\n# Comandos Concretos\r\nclass TurnOnCommand(Command):\r\n    def __init__(self, television: Television):\r\n        self.television = television\r\n\r\n    def execute(self):\r\n        self.television.turn_on()\r\n\r\n    def undo(self):\r\n        self.television.turn_off()\r\n\r\nclass TurnOffCommand(Command):\r\n    def __init__(self, television: Television):\r\n        self.television = television\r\n\r\n    def execute(self):\r\n        self.television.turn_off()\r\n\r\n    def undo(self):\r\n        self.television.turn_on()\r\n\r\nclass VolumeUpCommand(Command):\r\n    def __init__(self, television: Television):\r\n        self.television = television\r\n\r\n    def execute(self):\r\n        self.television.volume_up()\r\n\r\n    def undo(self):\r\n        self.television.volume_down()\r\n\r\nclass VolumeDownCommand(Command):\r\n    def __init__(self, television: Television):\r\n        self.television = television\r\n\r\n    def execute(self):\r\n        self.television.volume_down()\r\n\r\n    def undo(self):\r\n        self.television.volume_up()\r\n\r\n# Invocador\r\nclass RemoteControl:\r\n    def __init__(self):\r\n        self.history = []\r\n\r\n    def press_button(self, command: Command):\r\n        command.execute()\r\n        self.history.append(command)\r\n\r\n    def press_undo(self):\r\n        if self.history:\r\n            last_command = self.history.pop()\r\n            last_command.undo()\r\n        else:\r\n            print("No hay comandos para deshacer.")\r\n\r\n# Uso del Patr\xf3n Command\r\nif __name__ == "__main__":\r\n    tv = Television()\r\n\r\n    # Crear comandos\r\n    turn_on = TurnOnCommand(tv)\r\n    turn_off = TurnOffCommand(tv)\r\n    volume_up = VolumeUpCommand(tv)\r\n    volume_down = VolumeDownCommand(tv)\r\n\r\n    # Crear invocador (control remoto)\r\n    remote = RemoteControl()\r\n\r\n    # Ejecutar comandos\r\n    remote.press_button(turn_on)\r\n    remote.press_button(volume_up)\r\n    remote.press_button(volume_down)\r\n    remote.press_button(turn_off)\r\n\r\n    # Deshacer comandos\r\n    remote.press_undo()\r\n    remote.press_undo()\r\n    remote.press_undo()\r\n\n'})}),"\n",(0,s.jsx)(n.p,{children:"Salida esperada"}),"\n",(0,s.jsx)(n.pre,{children:(0,s.jsx)(n.code,{children:"Televisi\xf3n encendida.\r\nVolumen aumentado.\r\nVolumen disminuido.\r\nTelevisi\xf3n apagada.\r\nTelevisi\xf3n encendida.\r\nVolumen aumentado.\r\nVolumen disminuido.\r\n\n"})}),"\n",(0,s.jsx)(n.p,{children:"Este ejemplo muestra c\xf3mo el patr\xf3n Command puede encapsular acciones, mantener un historial de operaciones y desacoplar al cliente del receptor, proporcionando flexibilidad y facilidad de mantenimiento."})]})}function c(e={}){const{wrapper:n}={...(0,t.R)(),...e.components};return n?(0,s.jsx)(n,{...e,children:(0,s.jsx)(l,{...e})}):l(e)}},8453:(e,n,o)=>{o.d(n,{R:()=>a,x:()=>d});var r=o(6540);const s={},t=r.createContext(s);function a(e){const n=r.useContext(t);return r.useMemo((function(){return"function"==typeof e?e(n):{...n,...e}}),[n,e])}function d(e){let n;return n=e.disableParentContext?"function"==typeof e.components?e.components(s):e.components||s:a(e.components),r.createElement(t.Provider,{value:n},e.children)}}}]);
"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[4372],{9485:(e,a,s)=>{s.r(a),s.d(a,{assets:()=>c,contentTitle:()=>t,default:()=>u,frontMatter:()=>i,metadata:()=>n,toc:()=>l});const n=JSON.parse('{"id":"Visitor/Visitor-Intro","title":"Introducci\xf3n al Patr\xf3n Visitor","description":"El patr\xf3n Visitor es un patr\xf3n de dise\xf1o de comportamiento que permite separar un algoritmo de la estructura de objetos sobre la que opera. En lugar de agregar m\xe9todos a las clases para implementar el algoritmo, este patr\xf3n introduce un objeto Visitante que encapsula las operaciones. De esta forma, las clases permanecen inalteradas, pero se pueden agregar nuevas funcionalidades simplemente creando nuevos visitantes.","source":"@site/docs/06-Visitor/01-Visitor-Intro.md","sourceDirName":"06-Visitor","slug":"/Visitor/Visitor-Intro","permalink":"/docosaurus-arq/docs/Visitor/Visitor-Intro","draft":false,"unlisted":false,"editUrl":"https://github.com/dazer-m-l/docosaurus-arq/tree/main/docs/docs/06-Visitor/01-Visitor-Intro.md","tags":[],"version":"current","sidebarPosition":1,"frontMatter":{"sidebar_position":1},"sidebar":"tutorialSidebar","previous":{"title":"Patron Visitor","permalink":"/docosaurus-arq/docs/category/patron-visitor"},"next":{"title":"Caracter\xedsticas del Patr\xf3n Visitor","permalink":"/docosaurus-arq/docs/Visitor/Visitor-Caracteristicas"}}');var o=s(4848),r=s(8453);const i={sidebar_position:1},t="Introducci\xf3n al Patr\xf3n Visitor",c={},l=[{value:"Contexto y Motivaci\xf3n",id:"contexto-y-motivaci\xf3n",level:2},{value:"Concepto Clave",id:"concepto-clave",level:2},{value:"\xbfCu\xe1ndo Usar el Patr\xf3n Visitor?",id:"cu\xe1ndo-usar-el-patr\xf3n-visitor",level:2}];function d(e){const a={code:"code",h1:"h1",h2:"h2",header:"header",li:"li",ol:"ol",p:"p",strong:"strong",ul:"ul",...(0,r.R)(),...e.components};return(0,o.jsxs)(o.Fragment,{children:[(0,o.jsx)(a.header,{children:(0,o.jsx)(a.h1,{id:"introducci\xf3n-al-patr\xf3n-visitor",children:"Introducci\xf3n al Patr\xf3n Visitor"})}),"\n",(0,o.jsxs)(a.p,{children:["El patr\xf3n ",(0,o.jsx)(a.strong,{children:"Visitor"})," es un patr\xf3n de dise\xf1o de comportamiento que permite separar un algoritmo de la estructura de objetos sobre la que opera. En lugar de agregar m\xe9todos a las clases para implementar el algoritmo, este patr\xf3n introduce un objeto ",(0,o.jsx)(a.strong,{children:"Visitante"})," que encapsula las operaciones. De esta forma, las clases permanecen inalteradas, pero se pueden agregar nuevas funcionalidades simplemente creando nuevos visitantes."]}),"\n",(0,o.jsx)(a.h2,{id:"contexto-y-motivaci\xf3n",children:"Contexto y Motivaci\xf3n"}),"\n",(0,o.jsx)(a.p,{children:"En el dise\xf1o orientado a objetos, a menudo trabajamos con estructuras complejas compuestas de diferentes tipos de objetos. Estos objetos pueden compartir una jerarqu\xeda com\xfan, como una clase base o una interfaz, pero tienen comportamientos \xfanicos. Sin embargo, agregar nuevos m\xe9todos directamente a cada clase para manejar operaciones espec\xedficas puede:"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Complicar el c\xf3digo"})," al llenar las clases con m\xe9todos adicionales que no forman parte de su responsabilidad principal."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Violar el principio de Responsabilidad \xdanica"})," al mezclar datos y l\xf3gica operativa en una misma clase."]}),"\n",(0,o.jsxs)(a.li,{children:[(0,o.jsx)(a.strong,{children:"Dificultar la extensibilidad"}),", ya que modificar las clases existentes puede introducir errores en un sistema ya probado."]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"El patr\xf3n Visitor aborda este problema permitiendo que las operaciones se implementen fuera de las clases. Esto mantiene las clases enfocadas \xfanicamente en sus datos y comportamiento inherente."}),"\n",(0,o.jsx)(a.h2,{id:"concepto-clave",children:"Concepto Clave"}),"\n",(0,o.jsxs)(a.p,{children:["El patr\xf3n ",(0,o.jsx)(a.strong,{children:"Visitor"})," utiliza una combinaci\xf3n de ",(0,o.jsx)(a.strong,{children:"dise\xf1o orientado a interfaces"})," y ",(0,o.jsx)(a.strong,{children:"doble despacho"})," para realizar las operaciones. Las clases que componen la estructura aceptan un objeto visitante a trav\xe9s de un m\xe9todo como ",(0,o.jsx)(a.code,{children:"accept(visitor)"}),". El visitante, a su vez, ejecuta la operaci\xf3n correspondiente seg\xfan el tipo del objeto visitado."]}),"\n",(0,o.jsx)(a.h2,{id:"cu\xe1ndo-usar-el-patr\xf3n-visitor",children:"\xbfCu\xe1ndo Usar el Patr\xf3n Visitor?"}),"\n",(0,o.jsxs)(a.ol,{children:["\n",(0,o.jsx)(a.li,{children:"Cuando tengas una estructura de objetos estable pero operaciones que cambian frecuentemente."}),"\n",(0,o.jsx)(a.li,{children:"Cuando necesites realizar diferentes acciones en una jerarqu\xeda de clases sin alterar la jerarqu\xeda misma."}),"\n",(0,o.jsxs)(a.li,{children:["Cuando desees seguir el principio ",(0,o.jsx)(a.strong,{children:"Open/Closed"})," (abierto para extensi\xf3n, cerrado para modificaci\xf3n)."]}),"\n"]}),"\n",(0,o.jsx)(a.p,{children:"Este patr\xf3n es especialmente \xfatil en aplicaciones como:"}),"\n",(0,o.jsxs)(a.ul,{children:["\n",(0,o.jsx)(a.li,{children:"Compiladores (para realizar diferentes an\xe1lisis sem\xe1nticos, optimizaciones, o generaci\xf3n de c\xf3digo)."}),"\n",(0,o.jsx)(a.li,{children:"Sistemas de reportes (para generar m\xfaltiples formatos de salida desde los mismos datos)."}),"\n",(0,o.jsx)(a.li,{children:"Herramientas de an\xe1lisis estructural (como diagramas UML o modelos de dominio)."}),"\n"]})]})}function u(e={}){const{wrapper:a}={...(0,r.R)(),...e.components};return a?(0,o.jsx)(a,{...e,children:(0,o.jsx)(d,{...e})}):d(e)}},8453:(e,a,s)=>{s.d(a,{R:()=>i,x:()=>t});var n=s(6540);const o={},r=n.createContext(o);function i(e){const a=n.useContext(r);return n.useMemo((function(){return"function"==typeof e?e(a):{...a,...e}}),[a,e])}function t(e){let a;return a=e.disableParentContext?"function"==typeof e.components?e.components(o):e.components||o:i(e.components),n.createElement(r.Provider,{value:a},e.children)}}}]);
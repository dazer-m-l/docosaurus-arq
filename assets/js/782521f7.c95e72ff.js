"use strict";(self.webpackChunkmy_website=self.webpackChunkmy_website||[]).push([[331],{3216:e=>{e.exports=JSON.parse('{"version":{"pluginId":"default","version":"current","label":"Next","banner":null,"badge":false,"noIndex":false,"className":"docs-version-current","isLast":true,"docsSidebars":{"tutorialSidebar":[{"type":"link","label":"Patrones de Dise\xf1o de Comportamiento","href":"/docosaurus-arq/docs/intro","docId":"intro","unlisted":false},{"type":"category","label":"Patr\xf3n Observer","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Patr\xf3n Observer","href":"/docosaurus-arq/docs/Observer/Observer-intro","docId":"Observer/Observer-intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n Observer","href":"/docosaurus-arq/docs/Observer/Observer-Caracteristicas","docId":"Observer/Observer-Caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n Observer","href":"/docosaurus-arq/docs/Observer/Observer-Ventajas-y-Desventajas","docId":"Observer/Observer-Ventajas-y-Desventajas","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n Observer","href":"/docosaurus-arq/docs/Observer/Observer-Ejemplo","docId":"Observer/Observer-Ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patr\xf3n-observer"},{"type":"category","label":"Patron Strategy","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n al patr\xf3n Strategy","href":"/docosaurus-arq/docs/Strategy/Strategy-intro","docId":"Strategy/Strategy-intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n Strategy","href":"/docosaurus-arq/docs/Strategy/Strategy-Caracteristicas","docId":"Strategy/Strategy-Caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n Strategy","href":"/docosaurus-arq/docs/Strategy/Strategy-ventaja-desventaja","docId":"Strategy/Strategy-ventaja-desventaja","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n Strategy","href":"/docosaurus-arq/docs/Strategy/Strategy-ejemplo","docId":"Strategy/Strategy-ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patron-strategy"},{"type":"category","label":"Patron Command","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n al Patr\xf3n de Dise\xf1o Command","href":"/docosaurus-arq/docs/Command/Command-intro","docId":"Command/Command-intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n de Dise\xf1o Command","href":"/docosaurus-arq/docs/Command/Command-caracteristicas","docId":"Command/Command-caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n de Dise\xf1o Command","href":"/docosaurus-arq/docs/Command/Command-ventaja-desventaja","docId":"Command/Command-ventaja-desventaja","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n Command","href":"/docosaurus-arq/docs/Command/Command-ejemplo","docId":"Command/Command-ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patron-command"},{"type":"category","label":"Patron State","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n al Patr\xf3n State","href":"/docosaurus-arq/docs/State/State-Intro","docId":"State/State-Intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n State","href":"/docosaurus-arq/docs/State/State-Caracteristicas","docId":"State/State-Caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n State","href":"/docosaurus-arq/docs/State/State-Ventaja-Desventaja","docId":"State/State-Ventaja-Desventaja","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n State","href":"/docosaurus-arq/docs/State/State-Ejemplo","docId":"State/State-Ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patron-state"},{"type":"category","label":"Patron Template Method","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n al Patr\xf3n Template Method","href":"/docosaurus-arq/docs/TemplateMethod/TemplateMethod-Intro","docId":"TemplateMethod/TemplateMethod-Intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n Template Method","href":"/docosaurus-arq/docs/TemplateMethod/TemplateMethod-Caracteristicas","docId":"TemplateMethod/TemplateMethod-Caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n Template Method","href":"/docosaurus-arq/docs/TemplateMethod/TemplateMethod-Ventaja-Desventaja","docId":"TemplateMethod/TemplateMethod-Ventaja-Desventaja","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n Template Method","href":"/docosaurus-arq/docs/TemplateMethod/TemplateMethod-Ejemplo","docId":"TemplateMethod/TemplateMethod-Ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patron-template-method"},{"type":"category","label":"Patron Visitor","collapsible":true,"collapsed":true,"items":[{"type":"link","label":"Introducci\xf3n al Patr\xf3n Visitor","href":"/docosaurus-arq/docs/Visitor/Visitor-Intro","docId":"Visitor/Visitor-Intro","unlisted":false},{"type":"link","label":"Caracter\xedsticas del Patr\xf3n Visitor","href":"/docosaurus-arq/docs/Visitor/Visitor-Caracteristicas","docId":"Visitor/Visitor-Caracteristicas","unlisted":false},{"type":"link","label":"Ventajas y Desventajas del Patr\xf3n Visitor","href":"/docosaurus-arq/docs/Visitor/Visitor-Ventaja-Desventaja","docId":"Visitor/Visitor-Ventaja-Desventaja","unlisted":false},{"type":"link","label":"Ejemplo del Patr\xf3n Visitor","href":"/docosaurus-arq/docs/Visitor/Visitor-Ejemplo","docId":"Visitor/Visitor-Ejemplo","unlisted":false}],"href":"/docosaurus-arq/docs/category/patron-visitor"}]},"docs":{"Command/Command-caracteristicas":{"id":"Command/Command-caracteristicas","title":"Caracter\xedsticas del Patr\xf3n de Dise\xf1o Command","description":"El patr\xf3n Command tiene una serie de caracter\xedsticas clave que lo convierten en una herramienta vers\xe1til y poderosa para el dise\xf1o de sistemas orientados a comandos. A continuaci\xf3n, se describen las principales caracter\xedsticas:","sidebar":"tutorialSidebar"},"Command/Command-ejemplo":{"id":"Command/Command-ejemplo","title":"Ejemplo del Patr\xf3n Command","description":"Un sistema de control remoto para dispositivos electr\xf3nicos. Este control remoto puede ejecutar varias acciones como encender o apagar dispositivos y ajustar el volumen. Cada acci\xf3n se encapsula como un comando.","sidebar":"tutorialSidebar"},"Command/Command-intro":{"id":"Command/Command-intro","title":"Introducci\xf3n al Patr\xf3n de Dise\xf1o Command","description":"El patr\xf3n de dise\xf1o Command es un patr\xf3n de comportamiento que encapsula una solicitud como un objeto, permitiendo parametrizar clientes con diferentes solicitudes, programar la ejecuci\xf3n de comandos o realizar un seguimiento de operaciones que puedan deshacerse. Este patr\xf3n act\xfaa como un intermediario entre el objeto que invoca una operaci\xf3n y el que realiza la acci\xf3n.","sidebar":"tutorialSidebar"},"Command/Command-ventaja-desventaja":{"id":"Command/Command-ventaja-desventaja","title":"Ventajas y Desventajas del Patr\xf3n de Dise\xf1o Command","description":"Ventajas","sidebar":"tutorialSidebar"},"intro":{"id":"intro","title":"Patrones de Dise\xf1o de Comportamiento","description":"Los patrones de dise\xf1o de comportamiento se enfocan en la asignaci\xf3n de responsabilidades entre los objetos y la forma en que colaboran entre s\xed, optimizando la comunicaci\xf3n y evitando el acoplamiento excesivo.","sidebar":"tutorialSidebar"},"Observer/Observer-Caracteristicas":{"id":"Observer/Observer-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n Observer","description":"---","sidebar":"tutorialSidebar"},"Observer/Observer-Ejemplo":{"id":"Observer/Observer-Ejemplo","title":"Ejemplo del Patr\xf3n Observer","description":"El siguiente ejemplo muestra la implementaci\xf3n del Patr\xf3n Observer en Python, donde un sujeto notifica a los observadores cuando su estado cambia.","sidebar":"tutorialSidebar"},"Observer/Observer-intro":{"id":"Observer/Observer-intro","title":"Patr\xf3n Observer","description":"---","sidebar":"tutorialSidebar"},"Observer/Observer-Ventajas-y-Desventajas":{"id":"Observer/Observer-Ventajas-y-Desventajas","title":"Ventajas y Desventajas del Patr\xf3n Observer","description":"Ventajas:","sidebar":"tutorialSidebar"},"State/State-Caracteristicas":{"id":"State/State-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n State","description":"El patr\xf3n State es un patr\xf3n de dise\xf1o de comportamiento que permite a un objeto cambiar su comportamiento cuando su estado interno cambia. Las principales caracter\xedsticas del patr\xf3n State se centran en la flexibilidad, la modularidad y la capacidad de extender el comportamiento de un objeto sin modificar su c\xf3digo base. A continuaci\xf3n, se detallan sus caracter\xedsticas m\xe1s importantes:","sidebar":"tutorialSidebar"},"State/State-Ejemplo":{"id":"State/State-Ejemplo","title":"Ejemplo del Patr\xf3n State","description":"El patr\xf3n State es \xfatil cuando el comportamiento de un objeto cambia en funci\xf3n de su estado interno. A continuaci\xf3n, se presenta un ejemplo para comprender mejor c\xf3mo funciona este patr\xf3n.","sidebar":"tutorialSidebar"},"State/State-Intro":{"id":"State/State-Intro","title":"Introducci\xf3n al Patr\xf3n State","description":"El patr\xf3n State es uno de los patrones de dise\xf1o de comportamiento que permite que un objeto altere su comportamiento cuando su estado interno cambia. Este patr\xf3n es especialmente \xfatil para aplicaciones donde un objeto puede encontrarse en diferentes estados y cada estado requiere un comportamiento diferente.","sidebar":"tutorialSidebar"},"State/State-Ventaja-Desventaja":{"id":"State/State-Ventaja-Desventaja","title":"Ventajas y Desventajas del Patr\xf3n State","description":"El patr\xf3n State ofrece una soluci\xf3n flexible y modular para manejar el comportamiento de un objeto que cambia seg\xfan su estado. Sin embargo, tambi\xe9n tiene limitaciones. A continuaci\xf3n, se enumeran las principales ventajas y desventajas:","sidebar":"tutorialSidebar"},"Strategy/Strategy-Caracteristicas":{"id":"Strategy/Strategy-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n Strategy","description":"El patr\xf3n Strategy se distingue por las siguientes caracter\xedsticas que lo hacen una herramienta valiosa en el dise\xf1o de sistemas:","sidebar":"tutorialSidebar"},"Strategy/Strategy-ejemplo":{"id":"Strategy/Strategy-ejemplo","title":"Ejemplo del Patr\xf3n Strategy","description":"Supongamos que estamos desarrollando una aplicaci\xf3n que calcula el costo de transporte dependiendo del medio seleccionado (env\xedo terrestre, a\xe9reo o mar\xedtimo). Cada tipo de transporte utiliza un algoritmo diferente para calcular el costo.","sidebar":"tutorialSidebar"},"Strategy/Strategy-intro":{"id":"Strategy/Strategy-intro","title":"Introducci\xf3n al patr\xf3n Strategy","description":"El patr\xf3n Strategy pertenece a los patrones de dise\xf1o de comportamiento, cuyo prop\xf3sito principal es mejorar c\xf3mo los objetos interact\xfaan y se relacionan entre s\xed. En este caso, el patr\xf3n facilita la definici\xf3n de una familia de algoritmos, encapsul\xe1ndolos en clases independientes que pueden intercambiarse en tiempo de ejecuci\xf3n sin necesidad de modificar el c\xf3digo que los utiliza. Este enfoque se basa en el principio de programaci\xf3n orientada a objetos conocido como \\"abierto para extensi\xf3n, cerrado para modificaci\xf3n\\", promoviendo la reutilizaci\xf3n de c\xf3digo y el desacoplamiento entre los componentes.","sidebar":"tutorialSidebar"},"Strategy/Strategy-ventaja-desventaja":{"id":"Strategy/Strategy-ventaja-desventaja","title":"Ventajas y Desventajas del Patr\xf3n Strategy","description":"Ventajas","sidebar":"tutorialSidebar"},"TemplateMethod/TemplateMethod-Caracteristicas":{"id":"TemplateMethod/TemplateMethod-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n Template Method","description":"El patr\xf3n Template Method se basa en definir el esqueleto de un algoritmo en una clase base, delegando los detalles espec\xedficos a subclases. Este enfoque proporciona flexibilidad, organizaci\xf3n y reutilizaci\xf3n de c\xf3digo. A continuaci\xf3n, se describen sus principales caracter\xedsticas:","sidebar":"tutorialSidebar"},"TemplateMethod/TemplateMethod-Ejemplo":{"id":"TemplateMethod/TemplateMethod-Ejemplo","title":"Ejemplo del Patr\xf3n Template Method","description":"El patr\xf3n Template Method se utiliza para definir el esqueleto de un algoritmo en una clase base, permitiendo que las subclases implementen partes espec\xedficas sin modificar la estructura general del algoritmo.","sidebar":"tutorialSidebar"},"TemplateMethod/TemplateMethod-Intro":{"id":"TemplateMethod/TemplateMethod-Intro","title":"Introducci\xf3n al Patr\xf3n Template Method","description":"El patr\xf3n Template Method es un patr\xf3n de dise\xf1o de comportamiento que define el esqueleto de un algoritmo en una clase base, permitiendo que las subclases redefinan ciertos pasos del algoritmo sin cambiar su estructura general. Este patr\xf3n es ampliamente utilizado para reutilizar c\xf3digo y establecer un comportamiento com\xfan, mientras se permite personalizaci\xf3n en partes espec\xedficas.","sidebar":"tutorialSidebar"},"TemplateMethod/TemplateMethod-Ventaja-Desventaja":{"id":"TemplateMethod/TemplateMethod-Ventaja-Desventaja","title":"Ventajas y Desventajas del Patr\xf3n Template Method","description":"El patr\xf3n Template Method ofrece una forma estructurada de definir algoritmos reutilizables y personalizables, pero tambi\xe9n tiene sus limitaciones. A continuaci\xf3n, se describen las principales ventajas y desventajas.","sidebar":"tutorialSidebar"},"Visitor/Visitor-Caracteristicas":{"id":"Visitor/Visitor-Caracteristicas","title":"Caracter\xedsticas del Patr\xf3n Visitor","description":"El patr\xf3n Visitor se caracteriza por su capacidad de separar algoritmos y estructuras de datos, permitiendo un dise\xf1o modular, extensible y f\xe1cil de mantener. A continuaci\xf3n, se describen sus principales caracter\xedsticas:","sidebar":"tutorialSidebar"},"Visitor/Visitor-Ejemplo":{"id":"Visitor/Visitor-Ejemplo","title":"Ejemplo del Patr\xf3n Visitor","description":"El patr\xf3n Visitor permite separar operaciones de los objetos sobre los cuales operan. Imaginemos un ejemplo cotidiano donde tenemos diferentes tipos de documentos (PDF y Word) y queremos realizar varias operaciones sobre ellos como imprimir, exportar o contar palabras.","sidebar":"tutorialSidebar"},"Visitor/Visitor-Intro":{"id":"Visitor/Visitor-Intro","title":"Introducci\xf3n al Patr\xf3n Visitor","description":"El patr\xf3n Visitor es un patr\xf3n de dise\xf1o de comportamiento que permite separar un algoritmo de la estructura de objetos sobre la que opera. En lugar de agregar m\xe9todos a las clases para implementar el algoritmo, este patr\xf3n introduce un objeto Visitante que encapsula las operaciones. De esta forma, las clases permanecen inalteradas, pero se pueden agregar nuevas funcionalidades simplemente creando nuevos visitantes.","sidebar":"tutorialSidebar"},"Visitor/Visitor-Ventaja-Desventaja":{"id":"Visitor/Visitor-Ventaja-Desventaja","title":"Ventajas y Desventajas del Patr\xf3n Visitor","description":"El patr\xf3n Visitor tiene muchas ventajas relacionadas con la extensibilidad y modularidad, pero tambi\xe9n presenta algunas limitaciones dependiendo del contexto. A continuaci\xf3n, se presentan sus principales pros y contras:","sidebar":"tutorialSidebar"}}}}')}}]);